name: Auto Build & Release Fish Slackware Package

on:
  schedule:
    - cron: "0 4 * * *" # daily at 04:00 UTC
  workflow_dispatch:

permissions:
  contents: write

jobs:
  auto_build_release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # needed to see all tags

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y wget xz-utils jq git fakeroot

      - name: Get latest Fish release info
        id: get_latest
        run: |
          latest_url=$(wget -qO- https://api.github.com/repos/fish-shell/fish-shell/releases/latest \
            | jq -r '.assets[] | select(.name | test("linux-x86_64\\.tar\\.xz$")) | .browser_download_url')
          if [ -z "$latest_url" ]; then
            echo "No x86_64 asset found!" >&2
            exit 1
          fi

          latest_file=$(basename "$latest_url")
          latest_version=$(echo "$latest_file" | sed -E 's/fish-([0-9.]+)-linux-x86_64\.tar\.xz/\1/')
          echo "latest_url=$latest_url" >> $GITHUB_ENV
          echo "latest_file=$latest_file" >> $GITHUB_ENV
          echo "latest_version=$latest_version" >> $GITHUB_ENV
          echo "pkg_file=fish-${latest_version}-x86_64-1_da.txz" >> $GITHUB_ENV

      - name: Check if tag exists
        id: check_tag
        run: |
          if git rev-parse "v${{ env.latest_version }}" >/dev/null 2>&1; then
           echo "Version ${{ env.latest_version }} already built. Skipping."
           echo "skip_build=true" >> $GITHUB_ENV
           exit 0
          else
           echo "skip_build=false" >> $GITHUB_ENV
          fi

      - name: Download fish tarball
        if: env.skip_build == 'false'
        run: wget -q ${{ env.latest_url }} -O fish.tar.xz

      - name: Extract fish binary
        if: env.skip_build == 'false'
        run: |
          mkdir fishpkg
          tar -xJf fish.tar.xz -C fishpkg
          mkdir -p pkg/usr/bin
          cp fishpkg/fish pkg/usr/bin/fish
          chmod 755 pkg/usr/bin/fish

      - name: Add install scripts
        if: env.skip_build == 'false'
        run: |
          mkdir -p pkg/install
          cp install/doinst.sh pkg/install/
          cp install/slack-desc pkg/install/

      - name: Build Slackware .txz package
        if: env.skip_build == 'false'
        run: |
          cd pkg
          fakeroot tar cvf ../fish-${{ env.latest_version }}-x86_64-1_da.tar *
          cd ..
          xz -z -9 -e fish-${{ env.latest_version }}-x86_64-1_da.tar
          mv fish-${{ env.latest_version }}-x86_64-1_da.tar.xz fish-${{ env.latest_version }}-x86_64-1_da.txz

      - name: Create Slackware repository directory
        if: env.skip_build == 'false'
        run: mkdir -p slackware

      - name: Move package to repository directory
        if: env.skip_build == 'false'
        run: mv ${{ env.pkg_file }} slackware/

      - name: Generate repository metadata files
        if: env.skip_build == 'false'
        run: ./.github/scripts/generate-repo-files.sh slackware

      - name: Commit repository files
        if: env.skip_build == 'false'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add slackware/
          git commit -m "Add Slackware package and repository files for v${{ env.latest_version }}" || echo "No changes to commit"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Commit & push tag
        if: env.skip_build == 'false'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git tag v${{ env.latest_version }}
          git push origin v${{ env.latest_version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate README from template
        if: env.skip_build == 'false'
        run: |
          cp -f README.md.template README.md
          sed -i "s|{{PKG_FILE}}|${{ env.pkg_file }}|g" README.md
          sed -i "s|{{UPSTREAM_FILE}}|${{ env.latest_file }}|g" README.md
          sed -i "s|{{REPO_URL}}|https://raw.githubusercontent.com/${{ github.repository }}/${{ github.ref_name }}|g" README.md

      - name: Commit README update
        if: env.skip_build == 'false'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add README.md
          git commit -m "Update README for release v${{ env.latest_version }}" || echo "No changes to commit"
          git push

      - name: Create GitHub Release
        if: env.skip_build == 'false'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ env.latest_version }}
          name: "Fish ${{ env.latest_version }} Slackware Package"
          body: |
            This release includes:

            - Slackware package: **${{ env.pkg_file }}**.
            - Built from upstream fish release: **${{ env.latest_file }}**.
            - Contains a single standalone `fish` binary for any Linux.
            - Packaged for Unraid.
            - Installation instructions in README.md.
          draft: false # <--- publish immediately
          files: ${{ env.pkg_file }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
